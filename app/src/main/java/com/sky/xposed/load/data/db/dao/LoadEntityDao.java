package com.sky.xposed.load.data.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sky.xposed.load.data.db.convert.ListStringConverter;
import java.util.List;

import com.sky.xposed.load.data.db.entity.LoadEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOAD_ENTITY".
*/
public class LoadEntityDao extends AbstractDao<LoadEntity, Long> {

    public static final String TABLENAME = "LOAD_ENTITY";

    /**
     * Properties of entity LoadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageNames = new Property(1, String.class, "packageNames", false, "PACKAGE_NAMES");
        public final static Property Main = new Property(2, String.class, "main", false, "MAIN");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
    }

    private final ListStringConverter packageNamesConverter = new ListStringConverter();

    public LoadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LoadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOAD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PACKAGE_NAMES\" TEXT," + // 1: packageNames
                "\"MAIN\" TEXT," + // 2: main
                "\"STATUS\" INTEGER NOT NULL );"); // 3: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOAD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoadEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        List packageNames = entity.getPackageNames();
        if (packageNames != null) {
            stmt.bindString(2, packageNamesConverter.convertToDatabaseValue(packageNames));
        }
 
        String main = entity.getMain();
        if (main != null) {
            stmt.bindString(3, main);
        }
        stmt.bindLong(4, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoadEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        List packageNames = entity.getPackageNames();
        if (packageNames != null) {
            stmt.bindString(2, packageNamesConverter.convertToDatabaseValue(packageNames));
        }
 
        String main = entity.getMain();
        if (main != null) {
            stmt.bindString(3, main);
        }
        stmt.bindLong(4, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoadEntity readEntity(Cursor cursor, int offset) {
        LoadEntity entity = new LoadEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : packageNamesConverter.convertToEntityProperty(cursor.getString(offset + 1)), // packageNames
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // main
            cursor.getInt(offset + 3) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoadEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageNames(cursor.isNull(offset + 1) ? null : packageNamesConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setMain(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoadEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoadEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoadEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
